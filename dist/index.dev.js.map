{"version":3,"sources":["index.js"],"names":["require","DynamoDBClient","DynamoDBDocumentClient","GetCommand","PutCommand","express","serverless","app","USERS_TABLE","process","env","client","dynamoDbClient","from","use","json","get","req","res","params","TableName","Key","userId","send","Item","name","status","error","console","log","post","body","next","module","exports","handler"],"mappings":"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","sourcesContent":["const { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");\nconst {\n  DynamoDBDocumentClient,\n  GetCommand,\n  PutCommand,\n} = require(\"@aws-sdk/lib-dynamodb\");\nconst express = require(\"express\");\nconst serverless = require(\"serverless-http\");\n\n\nconst app = express();\n\nconst USERS_TABLE = process.env.USERS_TABLE;\nconst client = new DynamoDBClient();\nconst dynamoDbClient = DynamoDBDocumentClient.from(client);\n\napp.use(express.json());\n\napp.get(\"/users/:userId\", async function (req, res) {\n  const params = {\n    TableName: USERS_TABLE,\n    Key: {\n      userId: req.params.userId,\n    },\n  };\n\n  try {\n    const { Item } = await dynamoDbClient.send(new GetCommand(params));\n    if (Item) {\n      const { userId, name } = Item;\n      res.json({ userId, name });\n    } else {\n      res\n        .status(404)\n        .json({ error: 'Could not find user with provided \"userId\"' });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not retreive user\" });\n  }\n});\n\napp.post(\"/users\", async function (req, res) {\n  const { userId, name } = req.body;\n  if (typeof userId !== \"string\") {\n    res.status(400).json({ error: '\"userId\" must be a string' });\n  } else if (typeof name !== \"string\") {\n    res.status(400).json({ error: '\"name\" must be a string' });\n  }\n\n  const params = {\n    TableName: USERS_TABLE,\n    Item: {\n      userId: userId,\n      name: name,\n    },\n  };\n\n  try {\n    await dynamoDbClient.send(new PutCommand(params));\n    res.json({ userId, name });\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not create user\" });\n  }\n});\n\napp.use((req, res, next) => {\n  return res.status(404).json({\n    error: \"Not Found\",\n  });\n});\n\n\nmodule.exports.handler = serverless(app);\n"],"file":"index.dev.js"}