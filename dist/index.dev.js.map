{"version":3,"sources":["index.js"],"names":["AWS","require","DynamoDBClient","DynamoDBDocumentClient","GetCommand","PutCommand","express","serverless","multer","multerS3","fs","config","region","s3Client","S3","app","USERS_TABLE","process","env","client","dynamoDbClient","from","update","accessKeyId","aws_access_key_id","secretAccessKey","aws_secret_access_key","upload","Storage","s3","ACL","bucket","key","req","file","cb","console","log","originalname","use","json","post","array","res","paramsBucket","Bucket","Key","Body","err","data","send","message","urls","files","map","url","location","name","type","mimetype","next","status","error","module","exports","handler"],"mappings":"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","sourcesContent":["const AWS = require('aws-sdk');\nconst { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");\nconst {\n  DynamoDBDocumentClient,\n  GetCommand,\n  PutCommand,\n} = require(\"@aws-sdk/lib-dynamodb\");\nconst express = require(\"express\");\nconst serverless = require(\"serverless-http\");\nconst multer = require(\"multer\");\nconst multerS3 = require(\"multer-s3\")\n\nconst fs = require(\"fs\");\n\nAWS.config.region = \"us-east-1\";\nvar s3Client = new AWS.S3();\n\nconst app = express();\n\nconst USERS_TABLE = process.env.USERS_TABLE;\nconst client = new DynamoDBClient();\nconst dynamoDbClient = DynamoDBDocumentClient.from(client);\n\n\nAWS.config.update({\n  accessKeyId: process.env.aws_access_key_id,\n  secretAccessKey: process.env.aws_secret_access_key,\n  region: \"us-east-1\"\n})\n\nvar s3Client = new AWS.S3();\n\nconst upload = multer(\n  {\n    Storage: multerS3({\n      s3: s3Client,\n      ACL: 'public-read',\n      bucket: \"apiprojectaws-dev-serverlessdeploymentbucket-ztd99sqpap6i/\",\n      key: function(req, file, cb){\n        console.log(file);\n        cb(null, file.originalname);\n      }\n\n    })\n    \n  });\n\n\napp.use(express.json());\n/*\napp.get(\"/users/:userId\", async function (req, res) {\n  const params = {\n    TableName: USERS_TABLE,\n    Key: {\n      userId: req.params.userId,\n    },\n  };\n\n  try {\n    const { Item } = await dynamoDbClient.send(new GetCommand(params));\n    if (Item) {\n      const { userId, name } = Item;\n      res.json({ userId, name });\n    } else {\n      res\n        .status(404)\n        .json({ error: 'Could not find user with provided \"userId\"' });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not retreive user\" });\n  }\n});\n\napp.post(\"/users\", async function (req, res) {\n  const { userId, name } = req.body;\n  if (typeof userId !== \"string\") {\n    res.status(400).json({ error: '\"userId\" must be a string' });\n  } else if (typeof name !== \"string\") {\n    res.status(400).json({ error: '\"name\" must be a string' });\n  }\n\n  const params = {\n    TableName: USERS_TABLE,\n    Item: {\n      userId: userId,\n      name: name,\n    },\n  };\n\n  try {\n    await dynamoDbClient.send(new PutCommand(params));\n    res.json({ userId, name });\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not create user\" });\n  }\n});\n*/\n\napp.post(\"/createFolder\", upload.array('image'), function(req, res){\n\n  var paramsBucket = {\n    Bucket: 'apiprojectaws-dev-serverlessdeploymentbucket-ztd99sqpap6i',\n    Key: \"folder-asdfghjkl/\",\n    ACL: \"public-read\",\n    Body: \"body does not matter\"\n  }\n  \n  s3Client.upload(paramsBucket, function(err, data){\n    if(err){\n      console.log(err);\n    }\n    else{\n      console.log(\"Successfully created folder in S3\");\n      //res.status(500).json({ success: \"Successfully created folder in S3\" });\n\n      res.send({\n        message: \"Uploaded\",\n        urls: req.files.map(function(file){\n          return {url: file.location, name: file.key, type: file.mimetype}\n        })\n      })\n     \n    }\n  })\n\n})\n\napp.use((req, res, next) => {\n  return res.status(404).json({\n    error: \"Not Found\",\n  });\n});\n\n\nmodule.exports.handler = serverless(app);\n"],"file":"index.dev.js"}