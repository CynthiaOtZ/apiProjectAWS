{"version":3,"sources":["index.js"],"names":["AWS","require","DynamoDBClient","DynamoDBDocumentClient","GetCommand","PutCommand","express","s3Client","S3","app","USERS_TABLE","process","env","config","region","from","client","json","dynamoDbClient","get","Key","userId","req","params","send","Item","name","res","status","error","console","log","_context","t0","_req$body","regeneratorRuntime","async","_context2","prev","next","body","TableName","awrap","stop","post","upload","ACL","Body","err","data","use","module","exports","handler","serverless"],"mappings":"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","file":"index.min.js","sourcesContent":["const AWS = require('aws-sdk');\nconst { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");\nconst {\n  DynamoDBDocumentClient,\n  GetCommand,\n  PutCommand,\n} = require(\"@aws-sdk/lib-dynamodb\");\nconst express = require(\"express\");\nconst serverless = require(\"serverless-http\");\n\nAWS.config.region = \"us-east-1\";\nvar s3Client = new AWS.S3();\n\nconst app = express();\n\nconst USERS_TABLE = process.env.USERS_TABLE;\nconst client = new DynamoDBClient();\nconst dynamoDbClient = DynamoDBDocumentClient.from(client);\n\napp.use(express.json());\n\napp.get(\"/users/:userId\", async function (req, res) {\n  const params = {\n    TableName: USERS_TABLE,\n    Key: {\n      userId: req.params.userId,\n    },\n  };\n\n  try {\n    const { Item } = await dynamoDbClient.send(new GetCommand(params));\n    if (Item) {\n      const { userId, name } = Item;\n      res.json({ userId, name });\n    } else {\n      res\n        .status(404)\n        .json({ error: 'Could not find user with provided \"userId\"' });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not retreive user\" });\n  }\n});\n\napp.post(\"/users\", async function (req, res) {\n  const { userId, name } = req.body;\n  if (typeof userId !== \"string\") {\n    res.status(400).json({ error: '\"userId\" must be a string' });\n  } else if (typeof name !== \"string\") {\n    res.status(400).json({ error: '\"name\" must be a string' });\n  }\n\n  const params = {\n    TableName: USERS_TABLE,\n    Item: {\n      userId: userId,\n      name: name,\n    },\n  };\n\n  try {\n    await dynamoDbClient.send(new PutCommand(params));\n    res.json({ userId, name });\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not create user\" });\n  }\n});\n\n\napp.post(\"/createFolder\", function(req, res){\n\n  var paramsBucket = {\n    Bucket: 'apiprojectaws-dev-serverlessdeploymentbucket-ztd99sqpap6i',\n    Key: \"folder-asdfghjkl/\",\n    ACL: \"public-read\",\n    Body: \"body does not matter\"\n  }\n  \n  s3Client.upload(paramsBucket, function(err, data){\n    if(err){\n      console.log(err);\n    }\n    else{\n      console.log(\"Successfully created folder in S3\");\n      console.log(data);\n    }\n  })\n\n})\n\napp.use((req, res, next) => {\n  return res.status(404).json({\n    error: \"Not Found\",\n  });\n});\n\n\nmodule.exports.handler = serverless(app);\n"]}