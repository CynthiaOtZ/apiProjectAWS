{"version":3,"sources":["index.js"],"names":["AWS","require","DynamoDBClient","DynamoDBDocumentClient","GetCommand","PutCommand","express","serverless","s3Client","S3","app","USERS_TABLE","process","env","client","dynamoDbClient","from","accessKeyId","secretAccessKey","aws_secret_access_key","region","upload","multer","Storage","ACL","bucket","req","file","cb","console","log","originalname","use","json","Key","array","res","Bucket","err","data","message","url","send","urls","files","map","location","name","key","type","mimetype","next","status","error","module","exports","handler"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,oBACOA,QAAQ,4BAA3BC,wBAAAA,yBAKJD,QAAQ,yBAHVE,iCAAAA,uBACAC,qBAAAA,WACAC,qBAAAA,WAEIC,QADFL,QAAQ,WAHVE,WAAAA,QAKyB,mBAJzBC,OAKaH,QAAQ,UAJrBI,SAKeJ,QAAQ,aAHnBK,GAAOL,QAAGA,MAChBD,IAAMO,OAAAA,OAAaN,YAOnB,IAAIO,SAAW,IAAIR,IAAIS,GAEjBC,IAAMJ,UAENK,YAAcC,QAAQC,IAAIF,YAPxBG,OAAGb,IAAQC,eASba,eAAiBZ,uBAAuBa,KAAKF,QAJnDd,IAAMU,OAAMJ,OAAO,CAEnBW,YAAiBL,QAAGA,IAAQC,kBAC5BK,gBAAmBhB,QAAAA,IAAJiB,sBACfC,OAAML,cAKJG,IAFFG,OAAAC,OAMA,CAEMD,QAASC,SACb,CACEC,GARFL,SAAAA,IAAiBN,IAAAA,GASXY,IAAEhB,cACJgB,OAAK,6DACLC,IAAM,SAAEC,EAAAC,EAAAC,GACLC,QAAEC,IAAAH,GACHE,EAAAA,KAAAF,EAAAI,mBASRrB,IAAIsB,IAAI1B,QAAQ2B,QAwDZC,IAAAA,KAAK,gBAAAb,OAFYc,MAAA,SAAA,SAAAT,EAAAU,GAOnB5B,SAASa,OAHD,CAJRgB,OAAA,4DAOA7B,IAAAA,oBACEgB,IAAGc,cACDT,KAAAA,wBAF0B,SAASS,EAAKC,GAQxCH,EACEI,QAAAA,IAASF,IAECG,QAAAA,IAAKd,qCAANS,EAAAM,KAAP,CACDF,QAFK,WAFRG,KAAAjB,EAAAkB,MAAAC,IAAA,SAAAlB,GAOD,MAAA,CAAAc,IAAAd,EAAAmB,SAAAC,KAAApB,EAAAqB,IAAAC,KAAAtB,EAAAuB,mBAKLxC,IAAIsB,IAAI,SAACN,EAAKU,EAAKe,GACjB,OAAOf,EAAIgB,OAAO,KAAKnB,KAAK,CAC1BoB,MAAO,gBAKXC,OAAOC,QAAQC,QAAUjD,WAAWG","file":"index.min.js","sourcesContent":["const AWS = require('aws-sdk');\nconst { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");\nconst {\n  DynamoDBDocumentClient,\n  GetCommand,\n  PutCommand,\n} = require(\"@aws-sdk/lib-dynamodb\");\nconst express = require(\"express\");\nconst serverless = require(\"serverless-http\");\nconst multer = require(\"multer\");\nconst multerS3 = require(\"multer-s3\")\n\nconst fs = require(\"fs\");\n\nAWS.config.region = \"us-east-1\";\nvar s3Client = new AWS.S3();\n\nconst app = express();\n\nconst USERS_TABLE = process.env.USERS_TABLE;\nconst client = new DynamoDBClient();\nconst dynamoDbClient = DynamoDBDocumentClient.from(client);\n\n\nAWS.config.update({\n  accessKeyId: process.env.aws_access_key_id,\n  secretAccessKey: process.env.aws_secret_access_key,\n  region: \"us-east-1\"\n})\n\nvar s3Client = new AWS.S3();\n\nconst upload = multer(\n  {\n    Storage: multerS3({\n      s3: s3Client,\n      ACL: 'public-read',\n      bucket: \"apiprojectaws-dev-serverlessdeploymentbucket-ztd99sqpap6i/\",\n      key: function(req, file, cb){\n        console.log(file);\n        cb(null, file.originalname);\n      }\n\n    })\n    \n  });\n\n\napp.use(express.json());\n/*\napp.get(\"/users/:userId\", async function (req, res) {\n  const params = {\n    TableName: USERS_TABLE,\n    Key: {\n      userId: req.params.userId,\n    },\n  };\n\n  try {\n    const { Item } = await dynamoDbClient.send(new GetCommand(params));\n    if (Item) {\n      const { userId, name } = Item;\n      res.json({ userId, name });\n    } else {\n      res\n        .status(404)\n        .json({ error: 'Could not find user with provided \"userId\"' });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not retreive user\" });\n  }\n});\n\napp.post(\"/users\", async function (req, res) {\n  const { userId, name } = req.body;\n  if (typeof userId !== \"string\") {\n    res.status(400).json({ error: '\"userId\" must be a string' });\n  } else if (typeof name !== \"string\") {\n    res.status(400).json({ error: '\"name\" must be a string' });\n  }\n\n  const params = {\n    TableName: USERS_TABLE,\n    Item: {\n      userId: userId,\n      name: name,\n    },\n  };\n\n  try {\n    await dynamoDbClient.send(new PutCommand(params));\n    res.json({ userId, name });\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not create user\" });\n  }\n});\n*/\n\napp.post(\"/createFolder\", upload.array('image'), function(req, res){\n\n  var paramsBucket = {\n    Bucket: 'apiprojectaws-dev-serverlessdeploymentbucket-ztd99sqpap6i',\n    Key: \"folder-asdfghjkl/\",\n    ACL: \"public-read\",\n    Body: \"body does not matter\"\n  }\n  \n  s3Client.upload(paramsBucket, function(err, data){\n    if(err){\n      console.log(err);\n    }\n    else{\n      console.log(\"Successfully created folder in S3\");\n      //res.status(500).json({ success: \"Successfully created folder in S3\" });\n\n      res.send({\n        message: \"Uploaded\",\n        urls: req.files.map(function(file){\n          return {url: file.location, name: file.key, type: file.mimetype}\n        })\n      })\n     \n    }\n  })\n\n})\n\napp.use((req, res, next) => {\n  return res.status(404).json({\n    error: \"Not Found\",\n  });\n});\n\n\nmodule.exports.handler = serverless(app);\n"]}