{"version":3,"sources":["index.js"],"names":["require","DynamoDBClient","DynamoDBDocumentClient","GetCommand","PutCommand","express","serverless","env","USERS_TABLE","client","app","from","json","use","req","res","params","_ref","Item","userId","name","regeneratorRuntime","async","_context","prev","next","TableName","Key","awrap","send","sent","status","error","t0","console","log","stop","body","_context2","module","exports","handler"],"mappings":"0BAA2BA,QAAQ,4BAA3BC,wBAAAA,yBAKJD,QAAQ,yBAHVE,iCAAAA,uBACAC,qBAAAA,WACAC,qBAAAA,WAFAF,QAAAA,QAAAA,WACAC,WAIiBH,QAJjBG,mBAGIE,IAAOA,UACPC,YAAaN,QAAQO,IAAAC,YAMrBC,OAAS,IAAIR,eAHbS,eAANR,uBAAAS,KAAAF,QAGAC,IAAMD,IAAAA,QAASG,QAGfF,IAAIG,IAAIR,iBAAR,SAAAS,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAEQT,EAAA,CAAkBU,UAAAlB,YAGtBmB,IAAK,CAHiBR,OAAAL,EAAAE,OAAAG,SAF1BI,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAO,MAIepB,eADEqB,KAAA,IAAA1B,WAAAa,KAHjB,KAAA,EAAAC,EAAAM,EAAAO,MAIIJ,EAJJT,EAIIS,OAEEP,EAAYH,EAAZG,OAAQL,EAAIE,EAAJF,KADLC,EAAAH,KAAA,CAAAO,OAAAA,EAAAC,KAAAA,KAHiBL,EAAAgB,OAAA,KAAAnB,KAAA,CAAAoB,MAAA,+CAF1BT,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,MAAA,GAE0BW,QAAAC,IAAAZ,EAAAU,IASdf,EAAAA,OATc,KAAAN,KASdM,CATcc,MAAA,4BAF1B,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAa,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAcMrB,IAAAA,KAAAA,SAAIH,SAAKE,EAAAC,GAALH,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAOO,EAAFkB,KAAElB,EAAPP,EAAOO,OAAAA,EAAPP,EAAOO,KAAQC,iBAAAA,EAAVL,EAAAgB,OAAT,KAAAnB,KAAA,CAAAoB,MAAA,8BACK,iBAAAZ,GACLL,EAAAA,OAAG,KACAgB,KAAO,CADVC,MAEQ,4BACThB,EAAA,CAgBDU,UAAWlB,YAjCWU,KAAA,CAAAC,OAAAA,EAoCpBC,KAAMA,IAxBFR,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAQNG,eAAAc,KAAA,IAAqBzB,WAAAY,KARfJ,KAAAA,EAQiBoB,EAAAA,KAAAA,CAAAA,OAAAA,EAAOZ,KAAAA,IARxBR,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAgCNsB,QAAQC,IAARG,EAAAL,IA5CsBlB,EAAAgB,OAAA,KAAAnB,KAAA,CAAAoB,MAAA,0BAYhBpB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAZgBF,IAAAG,IAAA,SAAAC,EAAAC,EAAAU,GAAA,OAAAV,EAAAgB,OAAA,KAAAnB,KAAA,CAA1BoB,MAAA,gBAwBmBO,OAAAC,QAAAC,QAAAnC,WAAAI","file":"index.min.js","sourcesContent":["const { DynamoDBClient } = require(\"@aws-sdk/client-dynamodb\");\nconst {\n  DynamoDBDocumentClient,\n  GetCommand,\n  PutCommand,\n} = require(\"@aws-sdk/lib-dynamodb\");\nconst express = require(\"express\");\nconst serverless = require(\"serverless-http\");\n\n\nconst app = express();\n\nconst USERS_TABLE = process.env.USERS_TABLE;\nconst client = new DynamoDBClient();\nconst dynamoDbClient = DynamoDBDocumentClient.from(client);\n\napp.use(express.json());\n\napp.get(\"/users/:userId\", async function (req, res) {\n  const params = {\n    TableName: USERS_TABLE,\n    Key: {\n      userId: req.params.userId,\n    },\n  };\n\n  try {\n    const { Item } = await dynamoDbClient.send(new GetCommand(params));\n    if (Item) {\n      const { userId, name } = Item;\n      res.json({ userId, name });\n    } else {\n      res\n        .status(404)\n        .json({ error: 'Could not find user with provided \"userId\"' });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not retreive user\" });\n  }\n});\n\napp.post(\"/users\", async function (req, res) {\n  const { userId, name } = req.body;\n  if (typeof userId !== \"string\") {\n    res.status(400).json({ error: '\"userId\" must be a string' });\n  } else if (typeof name !== \"string\") {\n    res.status(400).json({ error: '\"name\" must be a string' });\n  }\n\n  const params = {\n    TableName: USERS_TABLE,\n    Item: {\n      userId: userId,\n      name: name,\n    },\n  };\n\n  try {\n    await dynamoDbClient.send(new PutCommand(params));\n    res.json({ userId, name });\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error: \"Could not create user\" });\n  }\n});\n\napp.use((req, res, next) => {\n  return res.status(404).json({\n    error: \"Not Found\",\n  });\n});\n\n\nmodule.exports.handler = serverless(app);\n"]}